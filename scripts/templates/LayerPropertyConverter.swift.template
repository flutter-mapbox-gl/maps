// This file is generated by
// ./scripts/lib/generate.dart

import Mapbox
import MapboxAnnotationExtension

class LayerPropertyConverter {
{{#layerTypes}}
    class func add{{typePascal}}Properties({{type}}Layer: MGL{{typePascal}}StyleLayer, properties: [String: String]) {
        for (propertyName, propertyValue) in properties {
            let expression = interpretExpression(propertyName: propertyName, expression: propertyValue)
            switch propertyName {
                {{#paint_properties}}
                case "{{{value}}}":
                {{#isIosAsCamelCase}}
                    {{type}}Layer.{{iosAsCamelCase}} = expression;
                {{/isIosAsCamelCase}}
                {{^isIosAsCamelCase}}
                    {{type}}Layer.{{valueAsCamelCase}} = expression;
                {{/isIosAsCamelCase}}
                break;
                {{/paint_properties}}
                {{#layout_properties}}
                case "{{{value}}}":
                {{^isVisibilityProperty}}
                {{#isIosAsCamelCase}}
                    {{type}}Layer.{{iosAsCamelCase}} = expression;
                {{/isIosAsCamelCase}}
                {{^isIosAsCamelCase}}
                    {{type}}Layer.{{valueAsCamelCase}} = expression;
                {{/isIosAsCamelCase}}
                {{/isVisibilityProperty}}
                {{#isVisibilityProperty}}
                    {{type}}Layer.{{iosAsCamelCase}} = propertyValue == "visible";
                {{/isVisibilityProperty}}
                break;
                {{/layout_properties}}
             
                default:
                    break
            }
        }
    }

{{/layerTypes}}
    private class func interpretExpression(propertyName: String, expression: String) -> NSExpression? {
        let isColor = propertyName.contains("color");

        do {
            let json = try JSONSerialization.jsonObject(with: expression.data(using: .utf8)!, options: .fragmentsAllowed)
            // this is required because NSExpression.init(mglJSONObject: json) fails to create
            // a proper Expression if the data of is a hexString
            if isColor {
                if let color = json as? String {
                    return NSExpression(forConstantValue: UIColor(hexString: color))
                }
            }
            // this is required because NSExpression.init(mglJSONObject: json) fails to create
            // a proper Expression if the data of a literal is an array
            if let offset = json as? [Any]{
                if offset.count == 2 && offset.first is String && offset.first as? String == "literal" {
                    if let vector = offset.last as? [Any]{
                        if(vector.count == 2) {
                            if let x = vector.first as? Double, let y = vector.last as? Double {
                                return NSExpression(forConstantValue: NSValue(cgVector: CGVector(dx: x, dy: y)))
                            }
                    
                        }
                    }
                }
            }
            return NSExpression.init(mglJSONObject: json)
        } catch {
        }
        return nil
    }
}
