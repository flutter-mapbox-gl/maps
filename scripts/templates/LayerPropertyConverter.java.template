// This file is generated by
// ./scripts/lib/generate.dart

package com.mapbox.mapboxgl;

import com.mapbox.mapboxsdk.style.expressions.Expression;
import com.mapbox.mapboxsdk.style.layers.PropertyFactory;
import com.mapbox.mapboxsdk.style.layers.PropertyValue;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;


import static com.mapbox.mapboxgl.Convert.toMap;

class LayerPropertyConverter {
{{#layerTypes}}
  static PropertyValue[] interpret{{typePascal}}LayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();
    final JsonParser parser = new JsonParser();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      final JsonElement jsonElement = parser.parse(entry.getValue());
      Expression expression = Expression.Converter.convert(jsonElement);
      switch (entry.getKey()) {
        {{#paint_properties}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
          break;
        {{/paint_properties}}
        {{#layout_properties}}
        {{^isVisibilityProperty}}
        {{^requiresLiteral}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(expression));
        {{/requiresLiteral}}
        {{/isVisibilityProperty}}
        {{#requiresLiteral}}
        case "{{value}}":
          if(jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isString()){
            properties.add(PropertyFactory.iconImage(jsonElement.getAsString()));
          }else{
            properties.add(PropertyFactory.iconImage(expression));
          }
        {{/requiresLiteral}}
        {{#isVisibilityProperty}}
        case "{{value}}":
          properties.add(PropertyFactory.{{valueAsCamelCase}}(entry.getValue()));
        {{/isVisibilityProperty}}
          break;
        {{/layout_properties}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

{{/layerTypes}}
}